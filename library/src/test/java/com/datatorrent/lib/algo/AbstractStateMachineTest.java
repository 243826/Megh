/*
 * Copyright (c) 2014 DataTorrent, Inc. ALL Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.datatorrent.lib.algo;

/**
 *
 * Functional tests for {@link com.datatorrent.lib.algo.AbstractStateMachine}<p>
 *
 */

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import junit.framework.Assert;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.datatorrent.api.DefaultOutputPort;

import com.datatorrent.lib.testbench.CollectorTestSink;

public class AbstractStateMachineTest
{

  public static class StateMachine<T> extends AbstractStateMachine<T>
  {
    @Override
    public void processPatternFound(List<T> outputList)
    {
      outputPort.emit(new ArrayList<T>(outputList));
    }

    public transient DefaultOutputPort<List<T>> outputPort = new DefaultOutputPort<List<T>>();
  }

  private StateMachine<Integer> stateMachineMatcher;
  private AbstractStateMachine.StateMachine<Integer> stateMachine;
  private Integer[] inputPattern;
  private CollectorTestSink<Object> sink;

  @Before
  public void setup()
  {
    stateMachine = new AbstractStateMachine.StateMachine<Integer>();
    stateMachineMatcher = new StateMachine<Integer>();
    sink = new CollectorTestSink<Object>();
    stateMachineMatcher.outputPort.setSink(sink);
  }

  @After
  public void cleanup()
  {
    stateMachineMatcher.teardown();
    sink.collectedTuples.clear();
  }

  @Test
  public void test() throws Exception
  {
    inputPattern = new Integer[]{0, 1, 0, 1, 2};
    stateMachine.setStates(inputPattern);
    stateMachineMatcher.setStateMachine(stateMachine);
    stateMachineMatcher.setup(null);
    stateMachineMatcher.beginWindow(0);
    stateMachineMatcher.inputPort.process(0);
    stateMachineMatcher.inputPort.process(1);
    stateMachineMatcher.inputPort.process(1);
    stateMachineMatcher.inputPort.process(0);
    stateMachineMatcher.inputPort.process(1);
    stateMachineMatcher.inputPort.process(0);
    stateMachineMatcher.inputPort.process(1);
    stateMachineMatcher.inputPort.process(2);
    stateMachineMatcher.inputPort.process(1);
    stateMachineMatcher.endWindow();
    Assert.assertEquals("The number of tuples emitted is one", 1, sink.collectedTuples.size());
    Assert.assertEquals("Matching the output pattern with input pattern", Arrays.asList(inputPattern), sink.collectedTuples.get(0));
  }

  @Test
  public void testSimplePattern() throws Exception
  {
    inputPattern = new Integer[]{0, 0};
    stateMachine.setStates(inputPattern);
    stateMachineMatcher.setStateMachine(stateMachine);
    stateMachineMatcher.setup(null);
    stateMachineMatcher.beginWindow(0);
    stateMachineMatcher.inputPort.process(0);
    stateMachineMatcher.inputPort.process(0);
    stateMachineMatcher.inputPort.process(0);
    stateMachineMatcher.inputPort.process(1);
    stateMachineMatcher.inputPort.process(0);
    stateMachineMatcher.inputPort.process(0);
    stateMachineMatcher.endWindow();
    Assert.assertEquals("The number of tuples emitted are three", 3, sink.collectedTuples.size());
    List<Integer> inputList = Arrays.asList(inputPattern);
    for (Object object : sink.collectedTuples) {
      Assert.assertEquals("Matching the output pattern with input pattern", inputList, object);
    }
  }

  @Test
  public void testAutoGeneratedPattern() throws Exception
  {
    Random random = new Random();
    int patternSize = 15;
    inputPattern = new Integer[patternSize];
    int max = 10;
    int min = 1;
    int primeNumber = 5;
    for (int i = 0; i < patternSize; i++) {
      inputPattern[i] = (min + random.nextInt(max));
    }
    stateMachine.setStates(inputPattern);
    stateMachineMatcher.setStateMachine(stateMachine);
    stateMachineMatcher.setup(null);
    stateMachineMatcher.beginWindow(0);
    int numberOfIterations = 20;
    for (int i = 0; i < patternSize; i++) {
      for (int j = 0; j <= i; j++) {
        stateMachineMatcher.inputPort.process(inputPattern[j]);
      }
      for (int k = 0; k < numberOfIterations; k++) {
        stateMachineMatcher.inputPort.process(max + min + random.nextInt(max));
      }
      if (i % primeNumber == 0) {
        for (int j = 0; j < patternSize; j++) {
          stateMachineMatcher.inputPort.process(inputPattern[j]);
        }
      }
    }
    stateMachineMatcher.endWindow();
    Assert.assertEquals("The number of tuples emitted ", 1 + patternSize / primeNumber, sink.collectedTuples.size());
    List<Integer> inputList = Arrays.asList(inputPattern);
    for (Object output : sink.collectedTuples) {
      Assert.assertEquals("Matching the output pattern with input pattern", inputList, output);
    }
  }

}
