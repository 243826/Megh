#  Copyright (c) 2012 Malhar, Inc.
#  All Rights Reserved.

# Properties for Ads Application for CTR

#Need to set window interval

# The ports of com.malhartech.testbench.LoadGenerator are output("data");
# The properties with default values are
# stram.template.<name>.weights= #Default is same weights for all keys
# stram.template.<name>.values= #Default is no value
# stram.template.<name>.keys= #Must specify
# stram.template.<name>.tuples_per_ms=1
stram.template.loadgen.classname=com.malhartech.lib.testbench.LoadGenerator
stram.template.loadgen.keys=home,finance,sports,mail
stram.template.loadgen.sleeptime=100

# The ports of com.malhartech.testbench.RandomClassifier are input("in_data"), output("out_data")
# stram.template.classifier.keys= #Must specify
# stram.template.classifer.weights= #Default is same weights for all keys
# stram.template.classifier.delimiter= #Default is ','
# stram.template.classifier.values= #Default is no values; If values are provided they should be as many as keys
# stram.template.classifier.valueoperation= #default is replace; other supported are add, mult, div, append
stram.template.classifier.classname=com.malhartech.lib.testbench.LoadClassifier
stram.template.classifier.keys=sprint,etrade,nike

# Filter Classifier
stram.template.filter.classname=com.malhartech.lib.testbench.FilterClassifer
stram.template.classifier.keys=sprint,etrade,nike
stram.template.classifier.weights=home:60,10,30;finance:10,75,15;sports:10,10,80;mail:50,15,35
stram.template.classifier.values=0.1,0.5,0.4
stram.template.classifier.filter=40,1000

# The ports of com.malhartech.mathlib.ArithmeticQuotient are output("quotient"), input("denominator"), input("numerator")
# stram.template.<name>.multiply_by= #Default is 1
stram.template.quotient.classname=com.malhartech.lib.math.ArithmeticQuotient

# The ports of com.malhartech.mathlib.ArithmeticSum are output("sum"), input("data")
stram.template.adder.classname=com.malhartech.lib.math.ArithmeticSum

# The ports of com.malhartech.mathlib.ArithmeticMargin are output("margin"), input("denominator"), input("numerator")
stram.template.margin.classname=com.malhartech.lib.math.ArithmeticMargin

# The ports of com.malhartech.testbench.ConsoleOutput are input("data") and no outputport
# stram.template.<name>.perwindow= #default is false
# stram.template.<name>.time_period= #default is 1000ms
stram.template.consoleout.classname=com.malhartech.lib.io.HttpOutputNode
stram.template.consoleout.resourceUrl=http://localhost:8888/somecontext

# Load generator for raw data for views
stram.operator.viewGen.template=loadgen
# cpm of serving 1000 ads on "home,finance,sports,mail"
stram.operator.viewGen.values=0.00215,0.003,0.00175,0.0006
stram.operator.viewGen.tuples_blast=50000


# Keeping weights on all Advertizers the same as they are evenly distributed on ad views
# Since both the classifier nodes have same advertizers, we can set the default on the template definition
stram.operator.adviews.template=classifier

#Connect insertadviews to the output of viewgen
#No values provided, so no value insertion would happen
stram.stream.viewinstream.sinks=adviews.in_data
stram.stream.viewinstream.source=viewGen.data
stram.stream.viewinstream.inline=true

# The ad click
stram.operator.insertclicks.template=filter


# Connect insertadkeys to the output of inputgen1
stram.stream.clickinstream.sinks=insertclicks.in_data
stram.stream.clickinstream.source=viewGen.data
stram.stream.clickinstream.inline=true

# For CTR, compute clickgen/viewgen and * 1000
stram.operator.ctr.template=quotient
stram.operator.ctr.multiply_by=10
stram.operator.ctr.dokey=true

# For Margin, compute (1 - cost/rev) as percentage and absolute
stram.operator.margin.template=margin

# Cost and revenue computation node
stram.operator.cost.template=adder
stram.operator.rev.template=adder

# Adview stream
stram.stream.adviewsdata.sinks=ctrinstance.denominator,cost.data
stram.stream.adviewsdata.source=insertclicks.out_data
stram.stream.adviewsdata.inline=true

# Ad click stream
stram.stream.clicksdata.sinks=ctrinstance.numerator,rev.data
stram.stream.clicksdata.source=adclicks.out_data
stram.stream.clicksdata.inline=true

# All the console nodes
stram.operator.ctrConsole.template=consoleout
stram.operator.costConsole.template=consoleout
stram.operator.revConsole.template=consoleout
stram.operator.marginConsole.template=consoleout

# CTR console
stram.stream.ctrdata.sinks=ctrConsole.input
stram.stream.ctrdata.source=ctrinstance.quotient

# Cost console
stram.stream.costdata.sinks=costConsole.input,margin.numerator
stram.stream.costdata.source=costNode.sum

# Revenue console
stram.stream.revenuedata.sinks=revConsole.input,margininstance.denominator
stram.stream.revenuedata.source=rev.sum

# Margin console
stram.stream.margindata.sinks=marginConsole.input
stram.stream.margindata.source=margin.margin
